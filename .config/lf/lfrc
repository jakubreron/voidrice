#!/bin/sh
set ratios 1:2:3
set previewer ~/.config/lf/preview
set cleaner ~/.config/lf/cleaner

# Note on Image Previews
# For those wanting image previews, like this system, there are four steps to
# set it up. These are done automatically for LARBS users, but I will state
# them here for others doing it manually.
#
# 1. ueberzug must be installed.
# 2. The scope file (~/.config/lf/scope for me), must have a command similar to
#    mine to generate ueberzug images.
# 3. A `set cleaner` line as below is a cleaner script.
# 4. lf should be started through a wrapper script (~/.local/bin/lfub for me)
#    that creates the environment for ueberzug. This command can be be aliased
#    in your shellrc (`alias lf="lfub") or if set to a binding, should be
#    called directly instead of normal lf.

# Basic vars
set shell zsh
set shellopts '-euy'
set ifs "\n"
set scrolloff 10
set icons
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set hidden
set drawbox
set ignorecase true
set info size:time
set autoquit true
set statfmt "\033[7;31m %p \033[32m %c \033[33m %u %g \033[34m %s \033[35m %t |\033[36m -> %l |\033[0m"

cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
	application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) localc $fx ;;
	image/vnd.djvu|application/pdf|application/octet-stream|application/postscript) setsid -f zathura $fx >/dev/null 2>&1 ;;
        text/*|application/json|inode/x-empty|application/x-subrip) $EDITOR $fx;;
	image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
	image/svg+xml) display -- $f ;;
	image/*) setsid -f $GUI_IMAGE_VIEWER $f >/dev/null 2>&1 ;;
	audio/*|video/x-ms-asf) mpv --audio-display=no $f ;;
	video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
	application/pdf|application/vnd.djvu|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
	application/vnd*) setsid -f libreoffice $fx >/dev/null 2>&1 ;; # NOTE: office formats
	application/pgp-encrypted) $EDITOR $fx ;;
	application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/vnd.oasis.opendocument.text|application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/octet-stream|application/vnd.oasis.opendocument.spreadsheet|application/vnd.oasis.opendocument.spreadsheet-template|application/vnd.openxmlformats-officedocument.presentationml.presentation|application/vnd.oasis.opendocument.presentation-template|application/vnd.oasis.opendocument.presentation|application/vnd.ms-powerpoint|application/vnd.oasis.opendocument.graphics|application/vnd.oasis.opendocument.graphics-template|application/vnd.oasis.opendocument.formula|application/vnd.oasis.opendocument.database) setsid -f libreoffice $fx >/dev/null 2>&1 ;;
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}

cmd fzf_jump $lf -remote "send $id cd $(fzf-jump)"

cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "$fx \n"
	printf "❌ Delete? [y/n] "
	read ans
	if [ -z "$ans" ]; then
		ans="y"
	fi
	[ $ans = "y" ] && rm -rf -- $fx
}}

cmd extract ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "$fx \n"
	printf "📦 Extract? [y/n] "
	read ans
	if [ -z "$ans" ]; then
		ans="y"
	fi
	if [[ $ans = "y" ]]; then
		case $fx in
			*.tar.bz2)   tar xjf $fx     ;;
			*.tar.gz)    tar xzf $fx     ;;
			*.bz2)       bunzip2 $fx     ;;
			*.rar)       unrar e $fx     ;;
			*.gz)        gunzip $fx      ;;
			*.tar)       tar xf $fx      ;;
			*.tbz2)      tar xjf $fx     ;;
			*.tgz)       tar xzf $fx     ;;
			*.zip)       unzip $fx       ;;
			*.Z)         uncompress $fx  ;;
			*.7z)        7z x $fx        ;;
			*.tar.xz)    tar xf $fx      ;;
		esac
	fi
}}

cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Move to where?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval mv -iv \"$x\" \"$dest\"
	done &&
  dest_path=$(eval echo "$dest")
  lf -remote "send $id cd $dest_path"
	notify-send " File(s) moved." "File(s) moved to $dest."
}}

cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Copy to where?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done &&
  dest_path=$(eval echo "$dest")
  lf -remote "send $id cd $dest_path"
	notify-send " File(s) copied." "File(s) copies to $dest."
}}

cmd share ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "$fx \n"
	printf "🌐 Share? [y/n] "
	read ans
	if [ -z "$ans" ]; then
		ans="y"
	fi
	[ $ans = "y" ] && curl -F"file=@$fx" https://0x0.st | wl-copy
}}

cmd fzf_search $lf -remote "send $id select \"$(fzf)\""

cmd mkdir $mkdir -p "$@"

cmd encrypt $gpg -c --no-symkey-cache --cipher-algo AES256 $f
cmd decrypt $gpg $f

cmd zip ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "$fx \n"
    printf "📦 Zip to: "
    read name
    mkdir $name
    cp -r $fx $name
    zip -r $name.zip $name
    rm -rf $name
}}

cmd kdeconnect ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Send to which device?"
	dest="$(kdeconnect-cli -a | cut -f1 -d ':' | cut -c 3- | fzf)" &&
	for x in $fx; do
		eval kdeconnect-cli --share=\"$x\" --name=\"$dest\"
	done &&
	notify-send " Sending file(s)" "Sending file(s) to $dest."
}}

cmd dragon %dragon-drop -a -x $fx

cmd convert ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
  printf "$fx \n"
  printf "💱 Convert to: "
	read name
	convert $fx $name
}}

cmd run_scripts ${{
  script=$(cat package.json | jq -r '.scripts | keys[] ' | sort | fzf --height 20%) && nr $(echo "$script")
}}

cmd bulkrename ${{
    tmpfile_old="$(mktemp)"
    tmpfile_new="$(mktemp)"

    [ -n "$fs" ] && fs=$(basename -a $fs) || fs=$(ls)

    echo "$fs" > "$tmpfile_old"
    echo "$fs" > "$tmpfile_new"
    $EDITOR "$tmpfile_new"

    [ "$(wc -l < "$tmpfile_old")" -eq "$(wc -l < "$tmpfile_new")" ] || { rm -f "$tmpfile_old" "$tmpfile_new"; exit 1; }

    paste "$tmpfile_old" "$tmpfile_new" | while IFS="$(printf '\t')" read -r src dst
    do
        [ "$src" = "$dst" ] || [ -e "$dst" ] || mv -- "$src" "$dst"
    done

    rm -f "$tmpfile_old" "$tmpfile_new"
    lf -remote "send $id unselect"
}}

cmd open_in_new_terminal $setsid -f $TERMINAL >/dev/null 2>&1

# Bindings
map J fzf_jump
map V push :!$EDITOR<space>
map D delete
map E extract
map M moveto
map C copyto
map U set hidden!

map ge encrypt
map gd decrypt
map gc convert
map gx run_scripts

map Sw share
map Sk kdeconnect

map <c-f> fzf_search
map <c-n> push :mkdir<space>""<left>
map <c-o> dragon

map Z zip $f

map x $$f # execute
map X $chmod +x "$f" && lf -remote "send reload"
map o &mimeopen "$f"
map O $mimeopen --ask "$f"

# Renames
map r push A<c-u> # new rename
map R bulkrename

map i :rename # before extension
map I :rename; cmd-home # at the very beginning

map a :rename; cmd-right # after extension
map A :rename; cmd-end # at the very end

map W open_in_new_terminal

# TODO: @Jakub check if it sill works on Linux
map Y $printf "%s" "$fx" | cross-platform-copy
map . $printf "%s" "$fx" | sed 's/.*\///' | cross-platform-copy

# Source Bookmarks
source "~/.config/lf/shortcutrc"
